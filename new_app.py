# -*- coding: utf-8 -*-
"""New_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q0Dc7hryogUbtc_OOVf0d3WpIxHa-wvR

# Import

## imports
"""

#importing all the libraries required
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error
import numpy as np

from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from matplotlib import pyplot as plt
import datetime as dt
pd.options.mode.chained_assignment = None
import math
import numpy as np
from statsmodels.api import OLS
import statsmodels.api as sm
from sklearn.metrics import mean_squared_error, r2_score
from mlxtend.feature_selection import SequentialFeatureSelector as SFS
from sklearn.linear_model import LinearRegression
import os
import matplotlib.ticker as ticker
import matplotlib.ticker as mticker
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

# dfs



### cleaned data & summary

df = pd.read_csv("new_tdf.csv")

# --- Remove Outliers Function ---
def remove_outliers(df, col):
    q1 = df[col].quantile(0.25)
    q3 = df[col].quantile(0.75)
    iqr = q3 - q1
    lower = q1 - 1.5 * iqr
    upper = q3 + 1.5 * iqr
    return df[(df[col] >= lower) & (df[col] <= upper)]

# --- Clean Data ---
df_clean = df.copy()
for col in ['meter_sale_price', 'procedure_area', 'actual_worth']:
    if col in df_clean.columns:
        df_clean = remove_outliers(df_clean, col)

datasets = {'Original DF': df, 'Cleaned ODF': df_clean}

# --- Data Preview and Summary ---
st.title("\U0001F50D Data Preview and Summary")

st.subheader("\U0001F4C4 Original DF Preview (up to 10,000 rows)")
st.dataframe(df.sample(100))

st.subheader("\U0001F4CB Data Summary for Original DF")
summary = pd.DataFrame({
    "Column": df.columns,
    "Data Type": [df[col].dtype for col in df.columns],
    "Null Count": df.isnull().sum().values,
    "Null %": (df.isnull().mean().values * 100).round(2),
    "Unique Values": df.nunique().values
})
st.dataframe(summary)

df_area_plot_stats =  pd.read_excel(
"df_area_plot_stats.xlsx"
)

# Sample title for your Streamlit app
st.title("Dubai Area-wise Average Meter Sale Price and Transaction Count")

# Assuming transactions_20_plot is your pre-processed DataFrame
# You can load or simulate it here if needed
# Example: transactions_20_plot = pd.read_csv("your_file.csv")

# Create the scatter mapbox figure
fig = px.scatter_mapbox(
    df_area_plot_stats,
    lat='area_lat',
    lon='area_lon',
    size='Transaction Count',  # Bubble size
    color='Average Meter Sale Price',  # Bubble color
    hover_name='area_name_en',
    hover_data={
        'Transaction Count': True,
        'Average Meter Sale Price': ':.2f',
        'area_lat': False,
        'area_lon': False
    },
    color_continuous_scale='Viridis',
    size_max=30,
    zoom=9,
    title="Dubai Area-wise Average Meter Sale Price and Transaction Count"
)

# Use open-street-map style
fig.update_layout(mapbox_style='open-street-map')

# Improve layout margins
fig.update_layout(margin={"r":0,"t":40,"l":0,"b":0})

# Show the plot in Streamlit
st.plotly_chart(fig, use_container_width=True)

# streamlit run

## data preview



# Box plots

